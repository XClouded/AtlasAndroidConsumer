package com.atlasapp.atlas_database;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.atlasapp.atlas_database.DatabaseConstants.ACTION;
import com.atlasapp.atlas_database.DatabaseConstants.ITEM_TYPE;
import com.atlasapp.atlas_database.DatabaseConstants.ITEM_TYPE_PRIORITY_ORDER;
import com.atlasapp.atlas_database.DatabaseConstants.ITEM_USER_TASK_STATUS;
import com.atlasapp.atlas_database.DatabaseConstants.OPERATION_METHOD;
import com.atlasapp.atlas_database.DatabaseConstants.SERVER_MESSAGE;
import com.atlasapp.atlas_database.DatabaseConstants.TABLES_NAME;
import com.atlasapp.common.AtlasAndroidUser;
import com.atlasapp.model.ATLContactModel;
import com.parse.FindCallback;
import com.parse.GetCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;
import com.parse.SaveCallback;


public class ItemUser extends AtlasServerTable implements ParseDBCallBackInterface{
	
	private Event event;
	
	private ItemUserProperties itemUserProperties;
	
	public ItemUserDelegateInterface itemUserListener;
	private boolean setItemUser;
	
	private ArrayList<ItemUserProperties> itemUserEventsInvites;

	private int itemUserEventsInvitesCount;

	private ArrayList<ItemUserProperties> allUserItemUsersPropertiesList;

	private ArrayList<String> webItemIdsList;
	
	
	public ItemUser()
	{
		
		itemUserProperties = new ItemUserProperties();
		// whether or not current ItemUser object been initialize
		setItemUser = false;
		TABLE_NAME = TABLES_NAME.ITEM_USER.getTableName();
		parseQuery = new ParseQuery(TABLE_NAME);
		userQuery = new ParseQuery(TABLE_NAME);
		atlasServerTable = new ParseObject(TABLE_NAME);
		parseCallBackDeleget = this;

	}
	/**
	 * Set the item_user table with the event properties
	 * @param setItemType - type ITEM_TYPE ,event or task
	 * @param setWebItemId - ITEM_TYPE.objectId
	 * @param setInviteeAtlasId 
	 * @param setStatus - type ITEM_USER_TASK_STATUS
	 * @param setStatusDateTime
	 * @param setPriorityOrder - type ITEM_TYPE_PRIORITY_ORDER
	 * @param setDisplayOrder - order to display invitees
	 * @return
	 */
	public void setItemUser( ItemUserProperties itemUserProperties
				)
	{
		
		this.itemUserProperties = itemUserProperties;
		setItemUser = true;
	}
	
	
	
	private  void saveItemUserOnParse(ItemUserProperties itemUserProperties) 
	{
		
		
		
		if (itemUserProperties!=null)
		{
			HashMap<String, Object> itemUserColumns = new HashMap<String, Object>();

		
			itemUserColumns.put("item_type", itemUserProperties.itemType.getItemName());
		
			itemUserColumns.put("web_item_id", itemUserProperties.webItemId);
			itemUserColumns.put("atlas_id", itemUserProperties.atlasId);
			itemUserColumns.put("status", itemUserProperties.status.ordinal());
			itemUserColumns.put("status_datetime", itemUserProperties.statusDateTime);
			itemUserColumns.put("was_received", itemUserProperties.wasReceived);
			itemUserColumns.put("display_order", itemUserProperties.displayOrder);
			itemUserColumns.put("priority_order", itemUserProperties.priorityOrder.ordinal());
			itemUserColumns.put("action", itemUserProperties.action.getActionName());
			/// wait for getSaveCallBack method...
				put(itemUserColumns);
			
		}

		
	}
	
	/**
	 * Search Parse DB for all itme_user 
	 * where atlas_id equal to the user's id
	 */
	public void getAllUserItemUserRecordsFromParse(ITEM_TYPE itemType) 
	{
		allUserItemUsersPropertiesList = new ArrayList<ItemUserProperties>();
		webItemIdsList = new ArrayList<String>();
		HashMap<String,Object> query = new HashMap<String,Object>();
		query.put("atlas_id", AtlasAndroidUser.getParseUserID());
		query.put("item_type", ITEM_TYPE.EVENT.getItemName());
		// CALL BACK ON getFindQueryCallBack
		findWhereEqualTo(query, OPERATION_METHOD.FIND);
	}
	/**
	 * Call back from getAllUserItems with all the user's item_user
	 * parseObjects return answer to gotItemUserCallBack method
	 */
	@Override
	public void getFindQueryCallBack(List<ParseObject> foundQueryList,
			boolean found) 
	{
		if (found && foundQueryList!=null && foundQueryList.size()>0 )
		{
			// return the user_item  records with 'was_received' and 
			///'received_datetime" updated properties for the user
		 
			allUserItemUsersPropertiesList = getItemUserPropertiesFromParseObject(foundQueryList);
			
			
				if (allUserItemUsersPropertiesList!=null && allUserItemUsersPropertiesList.size()>0 &&
						webItemIdsList!=null && webItemIdsList.size()>0)
				{
				// RETREIVE ALL THE INVITEES ITEM_USER RECORDS FROM PARSE
				ParseQuery inviteesQuery = new ParseQuery(TABLE_NAME);
				
				inviteesQuery.whereContainedIn("web_item_id", webItemIdsList);
				inviteesQuery.whereNotEqualTo("atlas_id", AtlasAndroidUser.getParseUserID());
				// CALL BACK ON getFindQueryCallBack
				inviteesQuery.findInBackground(new FindCallback() {
					  public void done(List<ParseObject> inviteesList, ParseException e) {
						    if (e == null && inviteesList!=null && inviteesList.size()>0) {
						    	
						        // The query was successful.
								ArrayList<ItemUserProperties> allItemUsersInviteesPropertiesList = getItemUserPropertiesFromParseObject(inviteesList);

								itemUserListener.gotItemUserCallBack(allUserItemUsersPropertiesList,allItemUsersInviteesPropertiesList,true);

						    } else {
						        // Something went wrong.
								itemUserListener.gotItemUserCallBack(null,null,false);


						    }
						  }
						});
						
				}
				else
				{
					itemUserListener.gotItemUserCallBack(null,null,false);

				}
				

			
		}
		else
		{
			itemUserListener.gotItemUserCallBack(null,null,false);
		}
		
	}
	
	
	public void getItemUserRecordsByWebItemId(ArrayList<String> webItemIdList)
	{
		if (webItemIdList!=null && webItemIdList.size()>0)
		{
			ParseQuery query = new ParseQuery(TABLE_NAME);
			
			query.whereContainedIn("web_item_id", webItemIdList);
			query.findInBackground(new FindCallback() {
				  public void done(List<ParseObject> list, ParseException e) {
					    if (e == null && list!=null && list.size()>0) {
							webItemIdsList = new ArrayList<String>();

					        // The query was successful.
							ArrayList<ItemUserProperties> allItemUserPropertiesList = getItemUserPropertiesFromParseObject(list);

							itemUserListener.getItemUserRecordsByWebItemIdCallBack(true,allItemUserPropertiesList);


					    } else {
					        // Something went wrong.
							itemUserListener.getItemUserRecordsByWebItemIdCallBack(false,null);


					    }
					  }
					});
			
		}
		else
		{
			itemUserListener.getItemUserRecordsByWebItemIdCallBack(false,null);
		}
	}
	
	
	/**
	 * Gets an array list of item_user parse objects 
	 * and return an array list of ItemUserProperties from 
	 * each.
	 * Update the user_item records 'was_received' and 
	 * 'received_datetime"
	 * properties
	 * 
	 * also sets the webItemIdsList with all the web_item_id's 
	 * for the array list item_user , that belongs to the local user
	 * 
	 * @param list 
	 * @return list type itemUserProperties
	 */
	private ArrayList<ItemUserProperties> getItemUserPropertiesFromParseObject(List<ParseObject> list)
	{
		ArrayList<ItemUserProperties> itemUsersPropertiesList = new ArrayList<ItemUserProperties>();
		ItemUserProperties itemUserProperties;
		for (ParseObject itemUserObject:list)
		{
			itemUserProperties = new ItemUserProperties();
			if (itemUserObject.getString("atlas_id").equals(AtlasAndroidUser.getParseUserID()))
				webItemIdsList.add(itemUserObject.getString("web_item_id"));
			ITEM_TYPE itemType = (itemUserObject.getString("item_type")!=null && itemUserObject.getString("item_type").equals("event"))?
					ITEM_TYPE.EVENT :ITEM_TYPE.TASK;
			ITEM_USER_TASK_STATUS status = (itemUserObject.getNumber("status")!=null)?
										   ((Integer)itemUserObject.getNumber("status")==0)? ITEM_USER_TASK_STATUS.SENT:
										   ((Integer)itemUserObject.getNumber("status")==1)? ITEM_USER_TASK_STATUS.ACCEPTED:
										   ((Integer)itemUserObject.getNumber("status")==2)? ITEM_USER_TASK_STATUS.DECLINED:
										   ((Integer)itemUserObject.getNumber("status")==3)? ITEM_USER_TASK_STATUS.COMPLITED:
										   ITEM_USER_TASK_STATUS.SENT:ITEM_USER_TASK_STATUS.SENT;
			ITEM_TYPE_PRIORITY_ORDER priority = (itemUserObject.getNumber("priority_order")!=null)?
												((Integer)itemUserObject.getNumber("priority_order")==0)? ITEM_TYPE_PRIORITY_ORDER.IDEAL:
											    ((Integer)itemUserObject.getNumber("priority_order")==1)? ITEM_TYPE_PRIORITY_ORDER.OKAY:
												ITEM_TYPE_PRIORITY_ORDER.IDEAL:ITEM_TYPE_PRIORITY_ORDER.IDEAL;	
			// update item_user date_time received date and was_received
			Date receiveDatetime = (itemUserObject.getString("atlas_id").equals(AtlasAndroidUser.getParseUserID()))?
					new Date() : itemUserObject.getDate("received_datetime");
			boolean received = (itemUserObject.getString("atlas_id").equals(AtlasAndroidUser.getParseUserID()))?
					true:itemUserObject.getBoolean("was_received");
			
			itemUserProperties.setItemUser(null,"",
					itemType, itemUserObject.getString("web_item_id"), 
					itemUserObject.getString("atlas_id"), status,
					itemUserObject.getDate("status_datetime"), receiveDatetime, 
					priority, (Integer)itemUserObject.getNumber("display_order"), received);
			itemUserProperties.objectId = itemUserObject.getObjectId();
//			itemUserProperties.setItemUser(itemType, 
//					itemUserObject.getString("web_item_id")
//					, itemUserObject.getString("atlas_id"), status,
//					datetime, 
//					priority, 
//					(Integer)itemUserObject.getNumber("display_order"));
			itemUsersPropertiesList.add(itemUserProperties);
		}
		return itemUsersPropertiesList;
	}
	/**
	 * Gets the list of the event's members (invitess) 
	 * and the event properties (after been updated on Parse ,with their
	 * object id and primary_web_event_id set)
	 * and update Parse with the item users accordingly
	 * 
	 * when done - sends a respond to a call back method (for the itemUsers listeners)
	 * itemUsersSavedCallBack (success, ArrayList<ItemUsersProperties>)
	 * @param eventInvitess
	 * @param event
	 */
	public void setItemUsers(ArrayList<ATLContactModel> eventInvitees
			,ArrayList<EventProperties> event) {
		if (eventInvitees!=null && eventInvitees.size()>0 && event!=null && event.size()>0)
		{
			ItemUserProperties itemUserProperties;
			itemUserEventsInvites = new ArrayList<ItemUserProperties>(); 
			for (EventProperties eventALT:event)
			{
				// make an invite from each alt time of the event
				if (eventALT.objectId!=null && !eventALT.objectId.equals(""))
				{
					for (ATLContactModel invitee:eventInvitees)
					{
						itemUserProperties = setItemUserPropertiesFromEvent(eventALT,invitee);
						if (itemUserProperties!=null)
						{ /// validate event invite successfully built
							itemUserEventsInvites.add(itemUserProperties);
						}
						else
						{/// error making an alt event invite to that invitee
							itemUserListener.itemUsersSavedCallBack(false, null);
							return;
						}
					}
				
				}
				else
				{
					//// something wrong happened and event doesnt have objectId
					itemUserListener.itemUsersSavedCallBack(false, null);
					return;
				}
			}
			/// done making invites and filling the itemUserEventsInvites
			//// update Parse with these invites ('item_user') table
			updateItemUsersOnParse();
		}else
			
			itemUserListener.itemUsersSavedCallBack(false, null);
	}
	/**
	 * Once the itemUserEventsInvites is set with all the right invites 
	 * from the invitees list and event properties
	 * set the item user on the item_user table
	 */
	private void updateItemUsersOnParse() {
		if (itemUserEventsInvites!=null && itemUserEventsInvites.size()>0
				&& itemUserEventsInvites.get(0)!=null)
		{// update on Parse
			itemUserEventsInvitesCount = 0;
			
			saveItemUserOnParse(itemUserEventsInvites.get(itemUserEventsInvitesCount));
		}
		else
		{
			itemUserListener.itemUsersSavedCallBack(false, null);

		}
		
	}
	/**
	 * Get all the current user item_user  and update them 
	 * on Parse (was received and date time)
	 * @param itemUserRecords
	 */
	public void updateItemUserOnParse(final ArrayList<ItemUserProperties> itemUserRecords)
	{
		if (itemUserRecords!=null && itemUserRecords.size()>0)
		{
			final ItemUserProperties itemUserProperties = itemUserRecords.get(0);
			
			if (itemUserProperties!=null)
			{
				parseQuery.getInBackground(itemUserProperties.objectId, new GetCallback() {
					  public void done(ParseObject object, ParseException e) {
					    if (e == null) {
					    	object.put("item_type", itemUserProperties.itemType.getItemName());
							
					    	object.put("web_item_id", itemUserProperties.webItemId);
					    	object.put("atlas_id", itemUserProperties.atlasId);
					    	object.put("status", itemUserProperties.status.ordinal());
					    	object.put("status_datetime", itemUserProperties.statusDateTime);
					    	object.put("was_received", itemUserProperties.wasReceived);
					    	object.put("display_order", itemUserProperties.displayOrder);
					    	object.put("priority_order", itemUserProperties.priorityOrder.ordinal());
					    	object.put("action", itemUserProperties.action.getActionName());
					    	/// wait for getSaveCallBack method...
							object.saveInBackground(new SaveCallback()
							{
								public void done(ParseException e) {
								    if (e == null)
								    {
								    	ArrayList<ItemUserProperties> clone = (ArrayList<ItemUserProperties>)itemUserRecords.clone();
								    	clone.remove(0);
								    	if (clone==null || clone.size()==0)
								    		itemUserListener.updateItemUserCallBack(true);
								    	else
								    		updateItemUserOnParse(clone);
								    	
								    }else 
								    {
							    		itemUserListener.updateItemUserCallBack(false);

									}
								}
							});
					    } else {
					      // something went wrong

					    }
					  }
					});
			}
		}
	}
	
	/**
	 * call back from parse on item user attempt to save
	 * keeps updating the parse table with the item users invites
	 * if update fails sends false message to the itemUsersSavedCallBack call back 
	 * methods
	 * otherwise , when done , sends 'true' and the array list of all the item users 
	 * properties updated.(to the listeners)
	 */
	@Override
	public void getSaveCallBack(boolean saved,ParseObject parseObjectSaved) 
	{
		if (saved && parseObjectSaved!=null)
		{
			// update the item_user saved on parse with the objectId given to it
			itemUserEventsInvites.get(itemUserEventsInvitesCount).objectId = parseObjectSaved.getObjectId();
			itemUserEventsInvitesCount++;
			if (itemUserEventsInvitesCount<itemUserEventsInvites.size())
			{ /// keep update parse with all the invites ...
				atlasServerTable = new ParseObject(TABLE_NAME);

				saveItemUserOnParse(itemUserEventsInvites.get(itemUserEventsInvitesCount));

			}
			else     
			{
				/// all item user were successfully updated  on parse DB
				itemUserListener.itemUsersSavedCallBack(true, itemUserEventsInvites);
			}
			
		}
		else
		{
			itemUserListener.itemUsersSavedCallBack(false, null);

		}
		
	}
	/**
	 * Gets an event alt time and invitee (as ATLContactModel) and
	 * return an invite type itemUserProperties object or null if
	 * not validate
	 * @param eventALT
	 * @param invitee  - Must have parse objectId (atlas id - must be an atlas user)
	 * @return
	 */
	private ItemUserProperties setItemUserPropertiesFromEvent(
			EventProperties eventALT, ATLContactModel invitee) {

		ItemUserProperties itemUserProperties = null;
		if (eventALT!=null && eventALT.objectId!=null && !eventALT.objectId.equals("")
				&& invitee!=null && invitee.getAtlasId()!=null && !invitee.getAtlasId().equals(""))
		{
			//// event alt has the needed properties for an invite
			itemUserProperties = new ItemUserProperties();
			//ITEM_TYPE_PRIORITY_ORDER priority = (eventALT.isPrimary)? ITEM_TYPE_PRIORITY_ORDER.IDEAL:ITEM_TYPE_PRIORITY_ORDER.OKAY;
			itemUserProperties.setItemUser(eventALT.title,
					invitee.displayName(),
					ITEM_TYPE.EVENT, 
					eventALT.objectId, invitee.getAtlasId(),
					ITEM_USER_TASK_STATUS.SENT, new Date(),
					new Date(),ITEM_TYPE_PRIORITY_ORDER.IDEAL,
					eventALT.displayOrder,false);
			
		}
		return itemUserProperties;
	}
	
	
	@Override
	public void getObjectIdCallBack(ParseObject retreivedObjectId,
			boolean success) {
		// TODO Auto-generated method stub
		
	}
	
	
	
	
	
	
	@Override
	public void getDataCallBack(byte[] fileRetreived, boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getSuccessCallBack(boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void registerSuccess(boolean signUpSuccess) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void signInSuccess(boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void saveFileCallBack(boolean success,ParseObject parseObjectSaved) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getUserEmailOnParseCallBack(
			HashMap<String, String> loginProperties, boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getFriendEmailOnParseCallBack(
			List<ParseObject> loginProperties, boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getFacebookFriendIdOnParseCallBack(
			List<ParseObject> findResult, boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getAllAtlasUsersCallBack(List<ParseObject> findResult,
			boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getAllFBAtlasUsersFriendsCallBack(List<ParseObject> findResult,
			boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void friendSignInSuccess(boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getAtlasNewFriendsByEmailCallBack(List<ParseObject> findResult,
			boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void getUpateCallBack(boolean success) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void signInNewFriendUserSuccess(boolean success, ParseUser user) {
		// TODO Auto-generated method stub
		
	}
	
	
	

	
	

}
